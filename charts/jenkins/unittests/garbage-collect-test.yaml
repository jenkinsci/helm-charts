suite: Garbage collection of pods
release:
  name: my-release
  namespace: my-namespace
templates:
  - jcasc-config.yaml
tests:
  - it: one cloud
    set:
      agent.garbageCollection.enabled: true
    asserts:
      - isKind:
          of: ConfigMap
      - hasDocuments:
          count: 1
      - isNotEmpty:
          path: data["jcasc-default-config.yaml"]
      - matchRegex:
          path: metadata.labels["helm.sh/chart"]
          pattern: ^jenkins-
      - matchSnapshot:
          path: data["jcasc-default-config.yaml"]
      - equal:
          path: metadata.namespace
          value: my-namespace

  - it: second cloud
    set:
      agent.garbageCollection.enabled: true
      additionalClouds.second.agent.containerCap: 5
    asserts:
      - isKind:
          of: ConfigMap
      - hasDocuments:
          count: 1
      - isNotEmpty:
          path: data["jcasc-default-config.yaml"]
      - matchRegex:
          path: metadata.labels["helm.sh/chart"]
          pattern: ^jenkins-
      - matchSnapshot:
          path: data["jcasc-default-config.yaml"]
      - equal:
          path: metadata.namespace
          value: my-namespace

  - it: namespaces
    set:
      agent.garbageCollection.enabled: true
      agent.garbageCollection.namespaces: |-
        namespace1
        namespace2
    asserts:
      - isKind:
          of: ConfigMap
      - hasDocuments:
          count: 1
      - isNotEmpty:
          path: data["jcasc-default-config.yaml"]
      - matchRegex:
          path: metadata.labels["helm.sh/chart"]
          pattern: ^jenkins-
      - matchSnapshot:
          path: data["jcasc-default-config.yaml"]
      - equal:
          path: metadata.namespace
          value: my-namespace
